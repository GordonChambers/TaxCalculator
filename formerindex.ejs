<!DOCTYPE html>
<html>
<head>
    <title>Tax Calculator</title>
    <link rel="stylesheet" type="text/css" href="styles.css">

    <!-- Include jQuery and jQuery UI for draggable functionality -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
</head>
<body>
    <button id="newCalculatorButton">New Calculator</button>
    <div id="calculators">
        <!-- Calculators go here -->
    </div>

    <script>
        // Get the div that will contain the calculators
        const calculatorsDiv = document.getElementById('calculators');

        // Function to generate a calculator template
        function getCalculatorTemplate(calculatorCount) {
            return `
                <div class="calculator">
                    <h2 class="calculator-title" contenteditable="true">Calculator ${calculatorCount}</h2>
                    <form>
                        <div class="input-wrapper">
                            <label for="income">Income:</label><br>
                            <input type="number" class="income" name="income" value="0" min="0" pattern="^\d+(.\d{1,2})?$" required><br>
                        </div>
                        <div class="input-wrapper">
                            <label for="deductions">Deductions:</label><br>
                            <input type="number" class="deductions" name="deductions" value="0" min="0" pattern="^\d+(.\d{1,2})?$" required><br>
                        </div>
                    </form>
                    <p class="tax"></p>
                    <button class="removeCalculator">Remove Calculator</button>
                    <button class="copyCalculator">Duplicate</button>
                </div>
        `;
        }

        // Function to create a calculator
        function createCalculatorHTML() {
            // Get the number of calculators
            const calculatorCount = calculatorsDiv.children.length;

            // Assign a color based on the number of calculators
            const color = getColor(calculatorCount);

            // Create a temporary div to hold the calculator template
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = getCalculatorTemplate(calculatorCount).trim();

            // Get the calculator from the temporary div
            const calculator = tempDiv.firstChild;

            // Set the background color of the calculator
            calculator.style.backgroundColor = color;

            // Store the color in a data attribute
            calculator.dataset.color = color;

            // Return the outer HTML of the calculator
            return calculator.outerHTML;
        }

        // Function to get a color based on a number
        function getColor(number) {
            const colors = ['#E6E6FA', '#CCCCFF', '#ADD8E6', '#90EE90', '#FFFFE0', '#FFDAB9', '#FFC0CB'];
            return colors[number % colors.length];
        }

        // Function to initialize a calculator
        function initializeCalculator(calculator) {
            // Get the income and deductions inputs and the tax paragraph
            const incomeInput = calculator.querySelector('.income');
            const deductionsInput = calculator.querySelector('.deductions');
            const taxParagraph = calculator.querySelector('.tax');

            // Function to calculate the tax
            function calculateTax() {
                const income = parseFloat(incomeInput.value);
                const deductions = parseFloat(deductionsInput.value);
                const tax = (income - deductions) * 0.37;
                taxParagraph.innerText = 'Your total tax is: $' + tax.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
            }

            // Add event listeners to the income and deductions inputs to calculate the tax when their values change
            incomeInput.addEventListener('input', calculateTax);
            deductionsInput.addEventListener('input', calculateTax);

            // Add an event listener to the "Remove Calculator" button to remove the calculator when the button is clicked
            calculator.querySelector('.removeCalculator').addEventListener('click', () => {
                calculator.remove();
            });

            // Add an event listener to the "Copy Calculator" button to create a new calculator with the same inputs when the button is clicked
            calculator.querySelector('.copyCalculator').addEventListener('click', () => {
                const newCalculatorHTML = createCalculatorHTML();
                $(calculator).after(newCalculatorHTML);
                const newCalculator = $(calculator).next()[0];

                // Get all inputs in the calculator and the new calculator
                const inputs = calculator.querySelectorAll('input');
                const newInputs = newCalculator.querySelectorAll('input');

                // Copy the value of each input to the corresponding input in the new calculator
                for (let i = 0; i < inputs.length; i++) {
                    newInputs[i].value = inputs[i].value;
                }

                // Initialize the new calculator
                initializeCalculator(newCalculator);
            });
            
            // Set the background color of the calculator
            calculator.style.backgroundColor = calculator.dataset.color;

            // Calculate the tax for the initial values
            calculateTax();
        }

        // Make the calculators sortable and disable text selection
        $( function() {
            var $calculators = $( "#calculators" ).sortable({
                cancel: "input,textarea,button,select,option, .calculator-title", // Cancel sorting when the title is clicked
            });

            // Disable sorting when the title is focused
            $(document).on('mousedown', '.calculator-title', function (e) {
                e.stopImmediatePropagation();
            });
        } );

        // Create the first calculator
        calculatorsDiv.insertAdjacentHTML('beforeend', createCalculatorHTML());

        // Initialize the first calculator
        initializeCalculator(calculatorsDiv.firstElementChild);

        // Get the "New Calculator" button
        const newCalculatorButton = document.getElementById('newCalculatorButton');

        // Add an event listener to the "New Calculator" button
        newCalculatorButton.addEventListener('click', () => {
            // Create a new calculator
            const newCalculatorHTML = createCalculatorHTML();

            // Add the new calculator to the end of the calculators div
            calculatorsDiv.insertAdjacentHTML('beforeend', newCalculatorHTML);

            // Get the new calculator
            const newCalculator = calculatorsDiv.lastElementChild;

            // Initialize the new calculator
            initializeCalculator(newCalculator);
        });
    </script>
</body>
</html>